"""Step 7: Schema alignment functionality."""

import logging
from datetime import datetime, timezone
from typing import List, Optional

from pydantic import ValidationError

from agentic_team import RunConfig, RunResult, TResponseInputItem

from ..agents import schema_alignment_agent
from ..config import (
    SCHEMA_ALIGNMENT_MODEL,
    SCHEMA_ALIGNMENT_OUTPUT_DIR,
    SCHEMA_ALIGNMENT_OUTPUT_FILENAME,
)
from ..schemas import (
    AlignedCandidateSchema,
    EntityTypeSchema,
    RelationshipSchema,
)
from ..utils import direct_save_json_output, run_agent_with_retry

logger = logging.getLogger(__name__)

async def align_schema(
    primary_domain: str,
    sub_domain_list: List[str],
    entity_data: EntityTypeSchema,
    relationship_data: RelationshipSchema,
    overall_trace_id: Optional[str] = None,
) -> Optional[AlignedCandidateSchema]:
    """Align extracted instances and relationships with an existing schema."""

    if not entity_data or not relationship_data:
        logger.info("Skipping Step 7 because prerequisites were not met.")
        return None

    logger.info(
        f"--- Running Step 7: Schema Alignment (Agent: {schema_alignment_agent.name}) ---"
    )
    print(f"\n--- Running Step 7: Schema Alignment using model: {SCHEMA_ALIGNMENT_MODEL} ---")

    step7_metadata = {
        "workflow_step": "7_schema_alignment",
        "agent_name": "Schema Alignment",
        "entity_type_count": str(len(entity_data.identified_entities)),
        "relationship_focus_count": str(len(relationship_data.entity_relationships_map)),
    }
    step7_run_config = RunConfig(trace_metadata={k: str(v) for k, v in step7_metadata.items()})

    context_summary = (
        f"Primary Domain: {primary_domain}\n"
        f"Sub-Domains: {', '.join(sub_domain_list)}\n"
        f"Entity Types Identified: {', '.join(e.entity_type for e in entity_data.identified_entities)}\n"
        f"Relationship sets: {len(relationship_data.entity_relationships_map)}"
    )

    step7_input: List[TResponseInputItem] = [
        {
            "role": "user",
            "content": (
                f"Align the following extracted instances and relationships with the target knowledge schema.\n"
                f"Context:\n{context_summary}\n"
                f"Provide mappings with confidence scores and output ONLY using AlignedCandidateSchema."
            ),
        },
        {
            "role": "user",
            "content": (
                f"--- Extracted Instances ---\n{entity_data.model_dump_json()}\n"
                f"--- Extracted Relationships ---\n{relationship_data.model_dump_json()}"
            ),
        },
    ]

    try:
        step7_result = await run_agent_with_retry(
            agent=schema_alignment_agent,
            input_data=step7_input,
            config=step7_run_config,
        )

        alignment_data: Optional[AlignedCandidateSchema] = None
        if step7_result:
            potential_output = getattr(step7_result, "final_output", None)
            if isinstance(potential_output, AlignedCandidateSchema):
                alignment_data = potential_output
            elif isinstance(potential_output, dict):
                try:
                    alignment_data = AlignedCandidateSchema.model_validate(potential_output)
                except ValidationError as e:
                    logger.warning(f"Step 7 output validation failed: {e}")
        else:
            logger.error("Step 7 FAILED: Runner.run returned no result.")
            return None

        if alignment_data:
            output_content = {
                "primary_domain": alignment_data.primary_domain,
                "analyzed_sub_domains": alignment_data.analyzed_sub_domains,
                "candidate_mappings": [m.model_dump() for m in alignment_data.candidate_mappings],
                "analysis_summary": alignment_data.analysis_summary,
                "analysis_details": {
                    "model_used": SCHEMA_ALIGNMENT_MODEL,
                    "agent_name": schema_alignment_agent.name,
                    "timestamp_utc": datetime.now(timezone.utc).isoformat(),
                },
                "trace_information": {
                    "trace_id": overall_trace_id or "N/A",
                    "notes": f"Generated by {schema_alignment_agent.name} in Step 7.",
                },
            }
            save_result = direct_save_json_output(
                SCHEMA_ALIGNMENT_OUTPUT_DIR,
                SCHEMA_ALIGNMENT_OUTPUT_FILENAME,
                output_content,
                overall_trace_id,
            )
            print(f"  - {save_result}")
            logger.info(f"Result of saving schema alignment output: {save_result}")
        else:
            logger.error("Step 7 FAILED: Could not obtain valid AlignedCandidateSchema output.")
        return alignment_data

    except (ValidationError, TypeError) as e:
        logger.exception("Validation or type error during Step 7.", exc_info=e)
        print(f"\nError: {e}")
        return None
    except Exception as e:
        logger.exception("Unexpected error during Step 7.")
        print(f"\nAn unexpected error occurred during Step 7: {type(e).__name__}: {e}")
        return None
