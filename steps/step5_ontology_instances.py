"""Step 5: Ontology instance extraction functionality."""

import logging
from datetime import datetime, timezone
from typing import Optional, List

from pydantic import ValidationError
from agentic_team import RunConfig, RunResult, TResponseInputItem

from ..agents import ontology_instance_extractor_agent
from ..config import (
    ONTOLOGY_INSTANCE_MODEL, ONTOLOGY_INSTANCE_OUTPUT_DIR,
    ONTOLOGY_INSTANCE_OUTPUT_FILENAME
)
from ..schemas import (
    OntologyInstanceSchema, SubDomainSchema, OntologyTypeSchema
)
from ..utils import direct_save_json_output, run_agent_with_retry

logger = logging.getLogger(__name__)


async def identify_ontology_instances(
    content: str,
    primary_domain: str,
    sub_domain_data: SubDomainSchema,
    ontology_type_data: OntologyTypeSchema,
    overall_trace_id: Optional[str] = None,
) -> Optional[OntologyInstanceSchema]:
    """Extract ontology concept mentions based on prior context."""
    if not primary_domain or not sub_domain_data or not ontology_type_data:
        logger.info("Skipping Step 5 (ontology instances) due to missing prerequisites.")
        return None

    logger.info(
        f"--- Running Step 5: Ontology Instance Extraction (Agent: {ontology_instance_extractor_agent.name}) ---"
    )
    print(f"\n--- Running Step 5: Ontology Instance Extraction using model: {ONTOLOGY_INSTANCE_MODEL} ---")

    step5_metadata = {
        "workflow_step": "5_ontology_instance_extraction",
        "agent_name": "Ontology Instance Extraction",
        "actual_agent": str(ontology_instance_extractor_agent.name),
        "primary_domain_input": primary_domain,
    }
    step5_run_config = RunConfig(trace_metadata={k: str(v) for k, v in step5_metadata.items()})

    context_summary = (
        f"Primary Domain: {primary_domain}\n"
        f"Identified Sub-Domains: {', '.join(sd.sub_domain for sd in sub_domain_data.identified_sub_domains)}\n"
        f"Ontology Types: {', '.join(o.ontology_type for o in ontology_type_data.identified_ontology_types)}"
    )

    step5_input: List[TResponseInputItem] = [
        {
            "role": "user",
            "content": (
                "Identify specific ontology concept mentions in the text. "
                "Use the provided context:\n" + context_summary + "\n\n"
                "For each concept mention provide a relevance score. "
                "Output ONLY using the OntologyInstanceSchema."
            ),
        },
        {"role": "user", "content": f"--- Full Text Start ---\n{content}\n--- Full Text End ---"},
    ]

    result: Optional[RunResult] = await run_agent_with_retry(
        agent=ontology_instance_extractor_agent,
        input_data=step5_input,
        config=step5_run_config,
    )

    instance_data: Optional[OntologyInstanceSchema] = None
    if result:
        potential_output = getattr(result, "final_output", None)
        if isinstance(potential_output, OntologyInstanceSchema):
            instance_data = potential_output
        elif isinstance(potential_output, dict):
            try:
                instance_data = OntologyInstanceSchema.model_validate(potential_output)
            except ValidationError as e:
                logger.warning(f"Ontology instance output validation error: {e}")

    if instance_data and instance_data.identified_concepts:
        logger.info(
            f"Step 5 Ontology Instances: extracted {len(instance_data.identified_concepts)} concepts."
        )
        instance_output_content = {
            "primary_domain": instance_data.primary_domain,
            "analyzed_sub_domains": instance_data.analyzed_sub_domains,
            "identified_concepts": [item.model_dump() for item in instance_data.identified_concepts],
            "analysis_summary": instance_data.analysis_summary,
            "analysis_details": {
                "source_text_length": len(content),
                "model_used": ONTOLOGY_INSTANCE_MODEL,
                "agent_name": ontology_instance_extractor_agent.name,
                "output_schema": OntologyInstanceSchema.__name__,
                "timestamp_utc": datetime.now(timezone.utc).isoformat(),
            },
            "trace_information": {
                "trace_id": overall_trace_id or "N/A",
                "notes": f"Generated by {ontology_instance_extractor_agent.name} in Step 5 of workflow.",
            },
        }
        save_result = direct_save_json_output(
            ONTOLOGY_INSTANCE_OUTPUT_DIR,
            ONTOLOGY_INSTANCE_OUTPUT_FILENAME,
            instance_output_content,
            overall_trace_id,
        )
        print(f"  - {save_result}")
    else:
        logger.warning("Step 5 Ontology Instance Extraction produced no results.")
        instance_data = None
    return instance_data
