"""Step 1: Domain identification functionality."""

import logging
from datetime import datetime, timezone
from typing import Dict, Any, Optional

from pydantic import ValidationError

from agentic_team import RunConfig, RunResult

from ..agents import domain_identifier_agent
from ..config import DOMAIN_MODEL, DOMAIN_OUTPUT_DIR, DOMAIN_OUTPUT_FILENAME
from ..schemas import DomainSchema
from ..utils import direct_save_json_output, run_agent_with_retry

logger = logging.getLogger(__name__)


async def identify_domain(
    content: str, overall_trace_id: Optional[str] = None
) -> Optional[DomainSchema]:
    """Identify the primary domain from the input content.

    Args:
        content: The text content to analyze
        overall_trace_id: The trace ID for logging purposes

    Returns:
        A DomainSchema object if successful, None otherwise
    """
    logger.info(
        f"--- Running Step 1: Domain ID (Agent: {domain_identifier_agent.name}) ---"
    )
    print(f"--- Running Step 1: Domain ID using model: {DOMAIN_MODEL} ---")

    step1_metadata_for_trace = {
        "workflow_step": "1_domain_id",
        "agent_name": "Domain ID",
        "actual_agent": str(domain_identifier_agent.name),
    }
    step1_run_config = RunConfig(
        trace_metadata={k: str(v) for k, v in step1_metadata_for_trace.items()}
    )
    step1_result: Optional[RunResult] = None
    domain_data: Optional[DomainSchema] = None

    try:
        step1_result = await run_agent_with_retry(
            agent=domain_identifier_agent, input_data=content, config=step1_run_config
        )

        if step1_result:
            potential_output = getattr(step1_result, "final_output", None)
            if isinstance(potential_output, DomainSchema):
                domain_data = potential_output
                logger.info(
                    "Successfully extracted DomainSchema from step1_result.final_output."
                )
            elif isinstance(potential_output, dict):
                try:
                    domain_data = DomainSchema.model_validate(potential_output)
                    logger.info(
                        "Successfully validated DomainSchema from step1_result.final_output dict."
                    )
                except ValidationError as e:
                    logger.warning(
                        f"Step 1 dict output failed DomainSchema validation: {e}"
                    )
            else:
                logger.warning(
                    f"Step 1 final_output was not DomainSchema or dict (type: {type(potential_output)})."
                )

        if domain_data and domain_data.domain:
            primary_domain = domain_data.domain.strip()
            if primary_domain:
                logger.info(
                    f"Step 1 Result: Primary Domain Identified = {primary_domain}"
                )
                print(f"Step 1 Result: Primary Domain Identified = {primary_domain}")

                logger.info("Saving primary domain identifier output to file...")
                print("\nSaving primary domain output file...")
                domain_output_content: Dict[str, Any] = {
                    "identified_primary_domain": primary_domain,
                    "analysis_details": {
                        "source_text_length": len(content),
                        "model_used": DOMAIN_MODEL,
                        "agent_name": domain_identifier_agent.name,
                        "output_schema": DomainSchema.__name__,
                        "timestamp_utc": datetime.now(timezone.utc).isoformat(),
                    },
                    "trace_information": {
                        "trace_id": overall_trace_id or "N/A",
                        "notes": f"Generated by {domain_identifier_agent.name} in Step 1 of workflow.",
                    },
                }
                save_result = direct_save_json_output(
                    DOMAIN_OUTPUT_DIR,
                    DOMAIN_OUTPUT_FILENAME,
                    domain_output_content,
                    overall_trace_id,
                )
                print(f"  - {save_result}")
                logger.info(f"Result of saving primary domain output: {save_result}")
            else:
                logger.error(
                    "Step 1 FAILED: Identified primary domain was empty after stripping. Skipping subsequent steps."
                )
                print(
                    "\nError: Failed to identify a non-empty primary domain in Step 1. Cannot proceed."
                )
                domain_data = None
        else:
            logger.error(
                "Step 1 FAILED: Could not extract valid DomainSchema output. Skipping subsequent steps."
            )
            print(
                "\nError: Failed to identify the primary domain in Step 1. Cannot proceed."
            )
            domain_data = None

    except (ValidationError, TypeError) as e:
        logger.exception(
            f"Validation or Type error during Step 1 agent run. Error: {e}",
            extra={"trace_id": overall_trace_id or "N/A"},
        )
        print("\nError: A data validation or type issue occurred during Step 1.")
        print(f"Error details: {e}")
        domain_data = None
    except Exception as e:
        # Includes potential retry failures from run_agent_with_retry
        logger.exception(
            "An unexpected error occurred during Step 1.",
            extra={"trace_id": overall_trace_id or "N/A"},
        )
        print(f"\nAn unexpected error occurred during Step 1: {type(e).__name__}: {e}")
        domain_data = None

    return domain_data
